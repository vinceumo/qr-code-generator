{"version":3,"sources":["Components/Header.js","Components/QrCodeOutputSvg.js","Components/QrCodeInputData/ContactInput.js","Components/QrCodeInputData/TextInput.js","Components/QrCodeInputData/UrlInput.js","Components/QrCodeInputData/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","QrCodeOutput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","CreateQRCode","qrCode","qrcode","addData","data","make","setState","CreateSvgUrl","state","svgUrl","svg","svgBlob","Blob","createSvgTag","type","URL","createObjectURL","prevProps","dangerouslySetInnerHTML","__html","concat","download","React","Component","ContactInput","values","keys","inputs","forEach","key","i","value","SetMsg","CreateVCard","UpdateContactInputStates","_this2","cardContent","vCardType","UpdateVCardValue","_this3","map","htmlFor","label","ref","input","inputType","name","id","defaultValue","onChange","e","TextInput","currentValue","target","UrlInput","QrCodeInputData","msg","SetQrCodeMsg","inputValues","assign","contact","OnRadioInputChange","inputToRender","currentTarget","radios","text","url","fullName","organisation","title","phone","email","QrCodeInputData_TextInput","QrCodeInputData_UrlInput","QrCodeInputData_ContactInput","radio","checked","InputToReturn","App","Components_Header","src_Components_QrCodeInputData","QrCodeOutputSvg","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.23e23b87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"has-bg-dark\">\r\n      <div className=\"container has-py-2 has-mb-3\">\r\n        <h1>QR Code Generator</h1>\r\n        <p>\r\n          <a href=\"https://github.com/vinceumo/qr-code-generator\">See project on github</a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport qrcode from \"qrcode-generator-es6\";\r\n\r\nclass QrCodeOutput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      qrCode: null,\r\n      svgUrl: null\r\n    };\r\n  }\r\n\r\n  CreateQRCode = () => {\r\n    const qrCode = new qrcode(0, \"H\");\r\n    qrCode.addData(this.props.data);\r\n    qrCode.make();\r\n    this.setState({ qrCode });\r\n    this.CreateSvgUrl(qrCode);\r\n  };\r\n\r\n  CreateSvgUrl(svg) {\r\n    const svgBlob = new Blob([svg.createSvgTag({})], {\r\n      type: \"image/svg+xml;charset=utf-8\"\r\n    });\r\n    const svgUrl = URL.createObjectURL(svgBlob);\r\n    this.setState({ svgUrl });\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.CreateQRCode();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.data !== this.props.data) {\r\n      this.CreateQRCode();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: `${this.state.qrCode.createSvgTag({})}`\r\n          }}\r\n        />\r\n        <a href={this.state.svgUrl} download=\"qrCode\" className=\"btn is-dark\">\r\n          Download\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QrCodeOutput;","import React from \"react\";\r\n\r\nclass ContactInput extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  UpdateVCardValue() {\r\n    let values = {};\r\n\r\n    Object.keys(this.props.inputs).forEach((key, i) => {\r\n      if (this[key].value !== \"\") values[key] = this[key].value;\r\n    });\r\n\r\n    this.props.SetMsg(this.CreateVCard(values), \"contact\");\r\n    this.props.UpdateContactInputStates(values);\r\n  }\r\n\r\n  CreateVCard(values) {\r\n    let cardContent = \"\";\r\n\r\n    Object.keys(values).forEach((key, i) => {\r\n      cardContent += `${this.props.inputs[key].vCardType}${values[key]}\\n`;\r\n    });\r\n\r\n    return `BEGIN:VCARD\r\nVERSION:4.0\r\n${cardContent}\r\nEND:VCARD`;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.UpdateVCardValue();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {Object.keys(this.props.inputs).map((key, i) => (\r\n          <div key={i}>\r\n            <label htmlFor=\"contactContentInputName\">\r\n              {this.props.inputs[key].label}:\r\n            </label>\r\n            <input\r\n              ref={input => (this[key] = input)}\r\n              type={this.props.inputs[key].inputType}\r\n              name=\"contactQrContent\"\r\n              id={`contactContentInput${this.props.inputs[key].vCardType}`}\r\n              defaultValue={this.props.inputs[key].value}\r\n              onChange={e => this.UpdateVCardValue()}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactInput;\r\n","import React from \"react\";\r\n\r\nfunction TextInput(props) {\r\n  return (\r\n    <div>\r\n    <label htmlFor=\"textInput\">Text: </label>\r\n      <textarea\r\n        id=\"textInput\"\r\n        defaultValue={props.currentValue}\r\n        onChange={e => props.SetMsg(e.target.value, \"text\")}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextInput;","import React from \"react\";\r\n\r\nfunction UrlInput(props) {\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"urlQrContentInput\">URL: </label>\r\n      <input\r\n        type=\"url\"\r\n        name=\"urlQrContent\"\r\n        id=\"urlQrContentInput\"\r\n        defaultValue={props.currentValue}\r\n        onChange={e => props.SetMsg(e.target.value, \"url\")}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UrlInput;\r\n","import React from 'react';\r\nimport ContactInput from \"./ContactInput\";\r\nimport TextInput from './TextInput';\r\nimport UrlInput from './UrlInput';\r\nimport './index.scss';\r\n\r\nclass QrCodeInputData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.radios = [\"text\", \"url\", \"contact\"];\r\n    this.state = {\r\n      inputToRender: \"text\",\r\n      msg: \"\",\r\n      inputValues: {\r\n        text: \"\",\r\n        url: \"https://\",\r\n        contact: {\r\n          fullName: {\r\n            label: \"Full Name\",\r\n            inputType: \"text\",\r\n            vCardType: \"FN:\",\r\n            value: \"\"\r\n          },\r\n          organisation: {\r\n            label: \"Organisation\",\r\n            inputType: \"text\",\r\n            vCardType: \"ORG:\",\r\n            value: \"\"\r\n          },\r\n          title: {\r\n            label: \"Title\",\r\n            inputType: \"text\",\r\n            vCardType: \"TITLE:\",\r\n            value: \"\"\r\n          },\r\n          phone: {\r\n            label: \"Phone number\",\r\n            inputType: \"tel\",\r\n            vCardType: \"TEL;voice;VALUE=uri:tel:\",\r\n            value: \"\"\r\n          },\r\n          email: {\r\n            label: \"Email\",\r\n            inputType: \"email\",\r\n            vCardType: \"EMAIL:\",\r\n            value: \"\"\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  SetMsg = (msg, inputType) => {\r\n    this.setState({ msg });\r\n    this.props.SetQrCodeMsg(msg);\r\n\r\n    if (inputType !== \"contact\") {\r\n      let inputValues = Object.assign({}, this.state.inputValues);\r\n      inputValues[inputType] = msg;\r\n      this.setState({ inputValues });\r\n    }\r\n  };\r\n\r\n  UpdateContactInputStates = (values) => {\r\n    let inputValues = Object.assign({}, this.state.inputValues);\r\n\r\n    Object.keys(inputValues.contact).forEach((key, i) => {\r\n      inputValues.contact[key].value = values[key];\r\n    });\r\n    this.setState({ inputValues });\r\n  }\r\n\r\n  OnRadioInputChange = e => {\r\n    this.setState({\r\n      inputToRender: e.currentTarget.value\r\n    });\r\n\r\n    this.SetMsg(\r\n      this.state.inputValues[e.currentTarget.value],\r\n      e.currentTarget.value\r\n    );\r\n  };\r\n\r\n  InputToReturn() {\r\n    switch (this.state.inputToRender) {\r\n      case \"text\":\r\n        return (\r\n          <TextInput\r\n            SetMsg={this.SetMsg}\r\n            currentValue={this.state.inputValues.text}\r\n          />\r\n        );\r\n      case \"url\":\r\n        return (\r\n          <UrlInput\r\n            SetMsg={this.SetMsg}\r\n            currentValue={this.state.inputValues.url}\r\n          />\r\n        );\r\n      case \"contact\":\r\n        return (\r\n          <ContactInput\r\n            UpdateContactInputStates={this.UpdateContactInputStates}\r\n            SetMsg={this.SetMsg}\r\n            inputs={this.state.inputValues.contact}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <TextInput\r\n            SetMsg={this.SetMsg}\r\n            currentValue={this.state.inputValues.text}\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"input-picker has-mb-4\">\r\n          {this.radios.map((radio, i) => (\r\n            <label\r\n              key={i}\r\n              className=\"input-label\"\r\n              htmlFor={`radio${radio}`}\r\n            >\r\n              <input\r\n                type=\"radio\"\r\n                value={radio}\r\n                checked={this.state.inputToRender === radio}\r\n                name=\"inputFormat\"\r\n                id={`radio${radio}`}\r\n                onChange={this.OnRadioInputChange}\r\n              />\r\n              {radio}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        {this.InputToReturn()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QrCodeInputData;","import React from 'react';\nimport './App.scss';\nimport Header from './Components/Header'\nimport QrCodeOutput from \"./Components/QrCodeOutputSvg\";\nimport QrCodeInputData from \"./Components/QrCodeInputData/index\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: \"\" };\n  }\n\n  SetQrCodeMsg = (msg) => {\n    this.setState({ msg });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container app-container\">\n          <QrCodeInputData\n            text={this.state.msg}\n            SetQrCodeMsg={this.SetQrCodeMsg}\n          />\n          <QrCodeOutput data={this.state.msg} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}